///////////////////////////////////////////////////////////////////////
//                                                                   //
//          READ THE DIRECTIONS IN THE OP FIRST OR ELSE              //
//           Make sure you have setup your player file               //
//                  Under SRL>PlayerManager                          //
//                       Press Play                                  //
//                                                                   //
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
Program AshamanPowerMiner;
{$DEFINE SMART}
{$I SRL-6/SRL.Simba}
{$i srl-6/lib/misc/srlplayerform.simba}

///////////////////////////////////////////////////////////////////////
//                                                                   //
//                  Begin of user setup                              //
//                Fill in the fields below                           //
//                                                                   //
///////////////////////////////////////////////////////////////////////

Const
{Break Settings}
  Bir           = 13;           // ***Random minutes to add/subtract from how long until we break***
  Bfr           = 7;            // ***Random minutes to add/subjtract from break duraction***

///////////////////////////////////////////////////////////////////////////////////////////
//                                                                                       //
//                            End of user setup                                          //
//           Don't touch below this line unless you know what you're doing!!             //
//                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////

Var
  OresMined,OreXP,OreDTM,XP,RColor,RTolerance,OColor,OTolerance,RColor2,RTolerance2,RColor3,RTolerance3:integer;
  SkipCenter,Switch, takeBreaks, debug, switchWorlds: Boolean;
  XPH,OresPH,RSat,RHue,OSat,OHue,RSat2,RHue2,RSat3,RHue3: Extended;
  CurrentBTime: TTimeMarker;
  W,X,Y,Z,BreakRounds,TotalBreaks,RealBTime,MinWait,MaxWait, direction, breakIn, breakFor: Integer;
  quickKey, rockColor, ore: String;



Const
  ScriptVersion = '1.7';

procedure declarePlayers();
var
  i,j: integer;
begin
  players.setup(playerForm.playerNames, playerForm.playerFile); // load the SPF players from the SRL Player Manager
  currentPlayer := 0;                                           // player to use first

  // set player attributes based on the settings from the form
  for i := 0 to high(players) do
    with players[i] do
    begin
      // convert the integers
      breakIn := strToInt(playerForm.players[i].settings[1]);  //minutes until break
      breakFor := strToInt(playerForm.players[i].settings[2]);  //minutes to break

      for j := 0 to high(playerForm.comboBoxItems[2]) do
        if (playerForm.players[i].settings[10] = playerForm.comboBoxItems[2][j]) then
          direction := j * 90;                                                  //direction

      World :=  strToInt(playerForm.players[i].settings[3]);                    //world

      // booleans
      takeBreaks := strToBool(playerForm.players[i].settings[4]);
      switchWorlds := strToBool(playerForm.players[i].settings[5]);
      FindMod := strToBool(playerForm.players[i].settings[6]);
      debug := strToBool(playerForm.players[i].settings[7]);

      // any other data types you've decided to use
      quickKey := playerForm.players[i].settings[0]; //quickkey
      rockColor := playerForm.players[i].settings[8]; //cleanorpots
      ore := playerForm.players[i].settings[9]; //cleanorpots
    end;
end;

// initiates the SRL player form (you aren't restricted to the procedure name; it can be whatever you want)
procedure initPlayerForm();
begin
  with playerForm do
  begin
    name := 'AshamanPowerMiner v'+toStr(ScriptVersion); // the title of the SPF, usually the name of your script
    scriptHelpThread := '';           // a link to a help thread, if set to '' will link to my setup guide
    scriptSettingsPath := '';         // where you want the settings file to be saved; saved in script's path by default

    editBoxLabels := ['QuickKey', 'Minutes until Break', '# of Minutes to Break', 'World']; // edit boxes are created for each array element
    editBoxDefaults := [ '0', '600', '15','0'];                                             // optional default values for each edit box; array length must equal editBoxLabel length
    checkBoxLabels := ['Take Breaks', 'Switch Worlds (After Break)', 'Logout if Mod is near', 'Debug'];        // same as editBoxLabels but for check boxes
    checkBoxDefaults := ['True','True','True', 'False'];

    comboBoxLabels := ['OutterRockColor','OreType','MMDirection'];                                                // same as editBoxLabels but for combo boxes (drop down boxes)
    comboBoxDefaults := ['Silver','Iron','North'];

    // this needs to be done for every element in the comboBoxLabels array
    setLength(comboBoxItems, length(comboBoxLabels));
    comboBoxItems[0] := ['Silver', 'Brown', 'Tan'];       // all the options available for the first combo box
    comboBoxItems[1] := ['Tin', 'Copper', 'Iron', 'Coal', 'Gold', 'Mithril', 'Addy'];       // all the options available for the first combo box
    comboBoxItems[2] := ['North', 'East', 'South', 'West'];
  end;
end;

function findNormalRandoms: Boolean;
Begin
  Result:= exitTreasure Or claimTicket;
End;

Function BreakHandler(BreakIn, BreakFor, randBreakIn, randBreakFor: Integer): Boolean;
Var
  H,M,S: Integer;
Begin
  If Not IsLoggedIn Then
    Exit;

  If (GetTimeRunning < ((W) + (Y) + BreakRounds)) Then
    Exit Else
    If (GetTimeRunning > ((W) + (Y) + BreakRounds)) Then
    Begin
      RealBTime := Round((X+Z)/60000);
      Writeln('Taking a break for about ' + IntToStr(RealBTime) + ' minutes.');
      Players[CurrentPlayer].Logout;
      CurrentBTime.Reset;
      CurrentBTime.Start;
      Repeat
        Wait(21000);
        ConvertTime((X+Z)-CurrentBTime.GetTime,H,M,S);
        Writeln('Breaktime left: '+IntToStr(H)+':'+IntToStr(M)+':'+IntToStr(S));
      Until(CurrentBTime.GetTime>(X+Z));
      Writeln('Logging in.');
      Players[CurrentPlayer].Login;
      Wait(4000);
      Result := IsLoggedIn;
      Minimap.SetAngle(Direction);
      MainScreen.SetAngle(MS_ANGLE_HIGH);
      IncEx(BreakRounds, (W) + (X));
      Inc(TotalBreaks);
      Writeln('The next break will occur in about ' + IntToStr(BreakIn) + ' minutes.');
      W := (BreakIn * 60000);
      X := (BreakFor * 60000);
      Y := RandomRange(-BIR * 60000, BIR * 60000);
      Z := RandomRange(-BFR * 60000, BFR * 60000);
    End;
End;

Procedure QuickBoxSort(var A: TIntegerArray; var B: TBoxArray; iLo, iHi: Integer; SortUp: Boolean);
Var
  Lo, Hi, Mid, T: Integer;
  TP: TBox;
Begin
  If (Length(A) <> Length(B)) Then
    Exit;
  Lo := iLo;
  Hi := iHi;
  Mid := A[(Lo + Hi) shr 1];
  Repeat
    If SortUp Then
    Begin
      While (A[Lo] < Mid) Do Inc(Lo);
      While (A[Hi] > Mid) Do Dec(Hi);
    End Else
    Begin
      While (A[Lo] > Mid) Do Inc(Lo);
      While (A[Hi] < Mid) Do Dec(Hi);
    End;
    If (Lo <= Hi) Then
    Begin
      T := A[Lo];
      A[Lo] := A[Hi];
      A[Hi] := T;
      TP := B[Lo];
      B[Lo] := B[Hi];
      B[Hi] := TP;
      Inc(Lo);
      Dec(Hi);
    End;
  Until Lo > Hi;
  If (Hi > iLo) Then QuickBoxSort(A, B, iLo, Hi, SortUp);
  If (Lo < iHi) Then QuickBoxSort(A, B, Lo, iHi, SortUp);
End;


{*
  Sorts A TBoxArray by Mid-Point. Closest OverallBox by Midpoint to the From-Point First.
*}
Procedure MidSortBoxArrayFrom(Var BoxArray: TBoxArray; Const From: TPoint);
Var
   I,L: Integer;
   Mid: TPoint;
   DistArr: TIntegerArray;
Begin
  L := High(BoxArray);
  If (L < 0) Then
    Exit;
  SetLength(DistArr, L + 1);

  For I := 0 To L Do
  Begin
    Mid := MiddleBox(BoxArray[I]);
    DistArr[I] := Round(Sqr(From.X - Mid.X) + Sqr(From.Y - Mid.Y));
  End;

  QuickBoxSort(DistArr,BoxArray,0,l,True);
End;

{*******************************************************************************
Function AutoupdateMe;
By: Shuttleu
Edited By: Ashaman88
Description: Autoupdates Script.
*******************************************************************************}
Procedure AutoUpdateMe;
Var
  Neifile: Integer;
  OnlineVersion, NewScript, NeiFeilNennen: String;
Begin
  Writeln('Checking for script updates...');
  OnlineVersion := GetPage('http://ashamanpowerminer.googlecode.com/git/Version.txt');
  Writeln('Online Version: '+ToStr(OnlineVersion));
  Writeln('Local Version: '+ToStr(ScriptVersion));
  If (trim(OnlineVersion) > ScriptVersion) Then
  Begin
    WriteLn('Newer script version online!');
    WriteLn('Autoupdating to newer version.');
    NewScript := GetPage('http://ashamanpowerminer.googlecode.com/git/AshamanPowerMiner.simba');
    NeiFeilNennen := ScriptPath+ 'AshamanPowerMiner V'+OnlineVersion+'.simba';
    Neifile := Rewritefile(NeiFeilNennen, true);
    Try
      WriteFileString(Neifile, NewScript);
    Except
      Begin
        WriteLn('Fatal error writing to '+NeiFeilNennen+'!!');
        Terminatescript;
      End;
    End;
    CloseFile(Neifile);
    WriteLn('New script downloaded to '+NeiFeilNennen+'!! Please use this one!!');
    TerminateScript;
  End Else
    WriteLn('You have the latest version of the script!');
End;

procedure free;
begin
  freeDTM(OreDTM);
end;

procedure setup;
begin
  clearDebug;
  autoUpdateMe;
  smartEnableDrawing := True;
  switch := true;

  initPlayerForm(); // initiate your settings
  runPlayerForm();  // run the form

  // use this so the script doesn't continue if the user exits out of the form
  if (not playerForm.isScriptReady) then
    terminatescript;

  declarePlayers;
  setupSRL;

  if not players[CurrentPlayer].login then
    terminateScript;

  if not debug then
    disableSRLDebug := true;

  Minimap.SetAngle(Direction);
  MainScreen.SetAngle(MS_ANGLE_HIGH);

  FindNormalRandoms;
  AddOnTerminate('Free');

  Case LowerCase(RockColor) Of
    'silver':Begin RHue:=0.78; RSat:=0.14; RColor:=7635833; RTolerance:=18; End;
    'brown': Begin RHue:=0.19; RSat:=1.33; RColor:=1525085; RTolerance:=10; End;
    'tan':   begin RHue:=0.24; RSat:=0.52; RColor:=6851244; RTolerance:=12; End;
  End;

  Case LowerCase(Ore) Of
    'tin':      Begin OHue:=2.43; OSat:=0.36; OColor:=11185056; OTolerance:=27; OreXP:=20; MinWait:=4000; MaxWait:=6000; OreDTM := DTMFromString('mggAAAHicY2NgYJBgZmCQBmIlIFYEYlEg5gfifkYGhlYg7gbiSUA8A4h7gTgtMRGCAy0ZslJTGWK9TBgSfEwZuIBmYcOMODAEAAA0qwqB'); End;
    'copper':   Begin OHue:=0.23; OSat:=1.15; OColor:=7324136; OTolerance:=24; OreXP:=18; MinWait:=4000; MaxWait:=6000; OreDTM := DTMFromString('mggAAAHicY2NgYHjHxMDwEYh/AfF3IH4DxE+AuJeRgaEViLuBeAoQTwfiiUC8NcOcYV+OFUNWiDXDrixLhiQ/M4aUAHMGLqBZ2DAjDgwBAKszEDM='); End;
    'iron':     Begin OHue:=0.09; OSat:=1.18; OColor:=2175590; OTolerance:=8;  OreXP:=35; MinWait:=4000; MaxWait:=6000; OreDTM := DTMFromString('mggAAAHicY2NgYNjAxMCwEYh3AfEOIF4DxEtBNCMDwxIgXgrEm4F4CxCvA2JzBQkGE3lxhkQ/czAd6W4EZnMBzcKGGXFgCAAAaJkMag=='); End;
    'coal':     Begin OHue:=0.00; OSat:=1.08; OColor:=1645853; OTolerance:=5;  OreXP:=50; MinWait:=4000; MaxWait:=6000; OreDTM := DTMFromString('mggAAAHicY2NgYJBjZmBQAmJtIFYDYhEglgHibEYGhkQgTgbiHCDOBOIiIFZRlmZQV5djyAmzYZCUFGYIddZniPUyYeACmoUNM+LAEAAARXgHSw=='); End;
    'gold':     Begin OHue:=0.16; OSat:=2.41; OColor:=6803937; OTolerance:=14; OreXP:=65; MinWait:=6000; MaxWait:=8000; OreDTM := DTMFromString('mggAAAHicY2NgYJjJxMAwD4iXAvFCIJ4BxBOBuJeRgaENiLuBeDIQTwfiCUA8u1qUYX23BENaoCVDT74wQ7SnMUOCjykDF9AsbJgRB4YAAJfRDYw='); End;
    'mithril':  Begin OHue:=0.04; OSat:=0.49; OColor:=8868946; OTolerance:=17; OreXP:=80; MinWait:=8000; MaxWait:=10000; OreDTM := DTMFromString('mggAAAHicY2NgYDjMxMBwDIjPAfFpJgh/JxD3MzIwtAFxBxBPAeKZQNwHxEbGPmCc5GfGYGjoyZDgY8oQ5KTHwAU0CxtmxIEhAACTaQzn'); End;
    'addy':     Begin OHue:=0.07; OSat:=0.15; OColor:=6521442; OTolerance:=11; OreXP:=95; MinWait:=8000; MaxWait:=10000; OreDTM := DTMFromString('mggAAAHicY2NgYJjFxMAwB4iXAPFCIJ4GxP0gzMjA0A7EXUA8CYinA3EfEFs6WTJYu1gzpAVaMqhoqTCEuxowBDnpMXABzcKGGXFgCAAAEyQLsA=='); End;
  End;

  W := (BreakIn * 60000);
  X := (BreakFor * 60000);
  Y := RandomRange(-BIR * 60000, BIR * 60000);
  Z := RandomRange(-BFR * 60000, BFR * 60000);
End;

function closeMouseOverMenu(): boolean;
var
  b, mouseRange, clientArea: TBox;
  p: TPoint;
begin
  if (not __findMouseOverBox(b)) then
    exit();

  getClientDimensions(clientArea.x2, clientArea.y2);

  __findMouseOverBox(b);
  b.edit(-10, -25, 10, 10);

  mouseRange := [b.x1 -50, b.y1 -50, b.x2 +50, b.y2 +50];
  mouseRange.setLimit([0, 0, clientArea.x2 -1, clientArea.y2 -1]);

  // get a point that is in mouseRange but not in b (choose option bounds);
  p := mouseRange.getRandomPoint([b]);

  if (p.x <> -1) then
  begin
    mouse(p, MOUSE_MOVE);
    print('closeMouseOverMenu(): Succesfully closed the menu', TDebug.SUB);
  end else
    print('closeMouseOverMenu(): Failed to close the menu', TDebug.ERROR);
end;

function mineOre: boolean;
var
  col1Edges, col2Edges, goodEdge, tpa,tpa2,tpa3: TPointArray;
  atpa, atpaFiltered: T2DPointArray;
  i, j, len, wid, hei, avelen: integer;
  col1,col1B2,col1B3,col2: TColorData
begin
  result := false;

  col1:= [RColor, RTolerance, [2, [RHue, RSat]]];
  col1B2:= [RColor2, RTolerance2, [2, [RHue2, RSat2]]];
  col1B3:= [RColor3, RTolerance3, [2, [RHue3, RSat3]]];
  col2:= [OColor, OTolerance, [2, [OHue, OSat]]];

  col1.gatherIn(tpa, mainScreen.getBounds()); //1st color

  If Lowercase(RockColor) = 'brown' Then
  Begin
    col1B2.gatherIn(tpa2, mainScreen.getBounds()); //lightbrown
    col1B3.gatherIn(tpa3, mainScreen.getBounds()); //darkbrown
    tpa.combine(tpa2);
    tpa.combine(tpa3);
  End;

  print('TRSBankscreen.__openChest()', TDebug.HEADER);

  col1Edges := findTPAEdges(tpa);

  SetLength(TPA,0);
  SetLength(TPA2,0);
  SetLength(TPA3,0);

  if (col2.gatherIn(tpa, mainScreen.getBounds())) then
    col2Edges := findTPAEdges(tpa);

  SetLength(TPA,0);

  len := length(col1Edges);

  if (len < 5) or (length(col2Edges) < 5) then
  begin
    print('Failed to find enough chest colors [1 '+toStr(len)+', 2 '+toStr(length(col2Edges))+' ]', TDebug.ERROR);
    print('TRSBankscreen.__openChest(): result = false', TDebug.FOOTER);
    SetLength(col1Edges,0);
    SetLength(col2Edges,0);
    exit(false);
  end;

  setLength(goodEdge, len * length(col2Edges));
  j := 0;

  for i := 0 to (len - 1) do
    if (nearbyPointInArrayEx(col1Edges[i], 1, 1, col2Edges)) then
    begin
      goodEdge[j] := col1Edges[i];
      inc(j);
    end;

  SetLength(col1Edges,0);
  SetLength(col2Edges,0);

  setLength(goodEdge, j);

  if (j < 5) then
  begin
    print('Failed to find enough good bank chest edges', TDebug.ERROR);
    print('TRSBankscreen.__openChest(): result = false', TDebug.FOOTER);
    exit(false);
  end;

  atpa := clusterTPAEx(goodEdge, 30, 30);

  for i := 0 to high(atpa) do
    if (length(atpa[i]) > 5) then
    begin
      getTPABounds(atpa[i]).getDimensions(wid, hei);

      if (wid > 3) and (hei > 3) then
        insert(atpa[i], atpaFiltered);
    end;

  SetLength(goodEdge,0);

  if (length(atpaFiltered) < 1) then
  begin
    print('Failed to find enough good vaild bank chest edges', TDebug.ERROR);
    print('TRSBankscreen.__openChest(): result = false', TDebug.FOOTER);
    SetLength(atpa,0);
    exit(false);
  end;

  tpa := mergeATPA(atpaFiltered);
  SetLength(atpa,0);
  atpa := clusterTPAEx(tpa, 20, 20);
  atpa.filterBetween(0,20);
  SetLength(tpa,0);

  atpa.sortfromfirstpoint(mainscreen.playerpoint);

  smartimage.debugatpa(atpa);

  for i := 0 to high(atpa) do
  begin
    if (random(7) = 0) then
      mouse(atpa[i][random(high(atpa[i]))].randRange(-2, 2))
    else
      mouse(atpa[i].getMiddle().randRange(-6, 6));

    if (isMouseOverText(['ore roc'])) then
    begin
      if (random(10) = 1) then
      begin
        fastClick(MOUSE_RIGHT);

        if (not chooseOption.select(['ore roc'])) then
          continue;
      end else
        if not didclick(true) then
          continue;

      wait(50 + random(100));

      smartimage.clear;
      closeMouseOverMenu;

      result := TabBackpack.WaitForShift(RandomRange(MinWait,MaxWait));

      if (result) then
      begin
        print('Succesfully opened the bank');
        SetLength(atpa,0);
        break();
      end;
    end;
  end;

  SetLength(atpa,0);

  print('TRSBankscreen.__openChest() result = '+lowercase(boolToStr(result)), TDebug.FOOTER);
end;

procedure TRSTabBackpack.dropItems(slotArr: TIntegerArray = DROP_PATTERN_REGULAR; Destroy: Boolean); Overload;
var
  r, I, l: integer;
  tia: TIntegerArray;
begin
  if (not self.open()) then
    exit;

  l := length(slotArr);

  if (l < 1) then
  begin
    print('dropItems: You didnt enter any slots to drop.', TDebug.ERROR);
    exit;
  end;

  for i := 0 to (l - 1) do
    if (self.isSlotVaild(slotArr[i])) and (self.isItemInSlot(slotArr[i])) then
    begin
      self.mouseSlot(slotArr[i], MOUSE_RIGHT);
      if chooseOption.optionsExist(['estroy']) then
        if chooseOption.select(['estroy']) then
        begin
          wait(randomrange(1000,1500));
          mousebox(inttobox(376,493,438,501),Mouse_Left,Mouse_Human);
          wait(randomrange(2000,2200));
          SkipCenter:=False;
          exit;
        end;
      if chooseOption.select(['Drop', 'drop', 'rop']) then
      begin
        insert(slotArr[i], tia);
        wait(120 + random(305));
      end;
    end;

  if (length(tia) > 0) then
  begin
    tia.sortQuick();
    print('dropItems: Dropped items in slots ' + toStr(tia));
  end else
    print('dropItems: Failed finding any items to drop');
end;

Procedure drop;
var
  timesTried:integer;
  T: TTimeMarker;
begin
  FindNormalRandoms;
  If Not IsLoggedIn Then
    Exit;

  If TabBackpack.IsEmpty then
    Exit;

  If Not SkipCenter Then
  Begin
    TypeByte(VK_ENTER);
    Wait(RandomRange(500,600));
    TypeByte(VK_ESCAPE);
    TypeByte(VK_ESCAPE);
    SkipCenter:=True;
  End;
  T.Start;
  Repeat
    SendKeys(ToStr(QuickKey), 60 + Random(60), 60 + Random(60));
    Wait(GaussRangeInt(0,100));

    If Not IsLoggedIn Then
      Exit;

    If T.GetTime>15000 Then
      Exit;
  Until TabBackpack.CountDTM(OreDTM)=0;

  If TabBackpack.Count = 0 Then
    Exit Else
    Wait(GaussRangeInt(1000,1500));

  If TabBackpack.Count = 0 Then
    Exit;

  T.Reset;
  T.Start;
  Repeat
    Wait(GaussRangeInt(500,1100));
    TabBackpack.DropItems(,True);;
    FindNormalRandoms;
  Until (TabBackpack.IsEmpty) Or (T.GetTime>5000);
End;

Procedure ProgressReport;
Begin
  ClearDebug;
  XP:=OresMined*OreXP;
  XPH := Round(XP * (3600.0 / (GetTimeRunning / 1000.0)));
  OresPH := Round((OresMined * (3600.0 / (GetTimeRunning / 1000.0))));

  Writeln('========AshamanPowerMiner v'+ScriptVersion+'=========');
  Writeln('Time Running: ' + ToStr(TimeRunning));
  Writeln('Mining: ' + Ore);
  Writeln('Ore Mined: ' + ToStr(OresMined));
  Writeln('Experience Earned: ' + IntToStr(XP));
  Writeln('Experience/Hour: ' + ToStr(XPH));
  Writeln('Ores/H: ' + ToStr(OresPH));
  Writeln('=======================================');
End;

Procedure MineRocks;
Var
  RockTimer:TTimeMarker;
Begin
  If Not IsLoggedIn Then
    Exit;
  RockTimer.Start;

  Repeat
    If mineOre Then
    Begin
      Inc(OresMined);
      RockTimer.Reset;
      RockTimer.Start;
      ProgressReport;
    End Else
      Drop;
    If Not IsLoggedIn Then
      Exit;
    If RockTimer.GetTime>300000 Then
      TerminateScript;
    Wait(Random(100));

    If TakeBreaks Then
      If BreakHandler(BreakIn,BreakFor,Bir,Bfr) Then
      Begin
        RockTimer.Reset;
        RockTimer.Start;
      End;
  Until (TabBackpack.IsFull);
End;

Begin
  Setup;
  While (Players.GetActive() > 0) Do
  Begin
    MineRocks;
    Drop;
    ProgressReport;
    If Not IsLoggedIn Then
      If Not Players[CurrentPlayer].Login Then
      TerminateScript Else
      Begin
        Minimap.SetAngle(Direction);
        MainScreen.SetAngle(MS_ANGLE_HIGH);
        SkipCenter:=False;
      End;
    If TakeBreaks Then
      BreakHandler(BreakIn,BreakFor,Bir,Bfr);
  End;
End.
